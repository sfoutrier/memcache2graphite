#!/usr/bin/env ruby

require 'simple-graphite'
require 'dalli'
require 'yaml'
require 'eventmachine'
require 'daemons'

conf = YAML.load_file(ARGV.fetch(1,"conf.yml"))

graphite = Graphite.new({
  :host => conf["graphite"]["host"], 
  :port => conf["graphite"]["port"],
  :type => conf["graphite"].fetch("type", "udp").to_sym
  })

memcache_conf = conf["memcache"]
options = {}
if memcache_conf["username"]
  options[:username] = memcache_conf["username"]
end
if memcache_conf["password"]
  options[:password] = memcache_conf["password"]
end
memcache = Dalli::Client.new("#{memcache_conf.fetch("host","localhost")}:#{memcache_conf.fetch("port",11211)}", options)

def aggregate(metric, value, type, state)
  if type == "sum"
    prev = state[metric]
    state[metric] = value
    if prev
      return value.to_f - prev.to_f
    end
  else
    return value
  end
end

def collect(conf, memcache, graphite, state)
  metrics_filter = conf["metrics"]
  message = {}
  memcache.stats.select{|node, metrics| metrics}.each do |node, metrics|
    metrics.select{|metric, value| metrics_filter.has_key?(metric)}.each do |metric, value|
      type = metrics_filter[metric]
      to_send = aggregate(metric, value, type, state)
      if to_send
        message[conf["graphite"]["path"].gsub(/<type>/,type).gsub(/<metric>/,metric)] = value
      end
    end
  end
  graphite.send_metrics(message)
end

def run_timer(conf, memcache, graphite)
  EventMachine.run {
    state = {}
    EventMachine.add_periodic_timer(conf.fetch("freq",1)) do
      collect(conf, memcache, graphite, state)
    end
  }
end

Daemons.run_proc(conf.fetch("daemon_name", "memcache2graphite"), 
  {
    :ontop => !conf["daemon_name"],
    :dir_mode => :normal,
    :log_dir => conf["log_dir"],
    :log_output => true,
    :dir => conf["pid_dir"],
    :monitor => true,
  }) do
  run_timer(conf, memcache, graphite)
end
